{"version":3,"sources":["API.ts","utils.ts","components/styled/card.tsx","components/styled/cardBTN.tsx","components/styled/cardsContainer.tsx","components/styled/p.tsx","components/styled/questionCard.tsx","components/styled/span.tsx","components/questionCard/questionCard.tsx","images/bg.jpg","App.styles.ts","components/styled/h1.tsx","components/styled/nextBTN.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","FetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Card","styled","div","Props","color","CardBTN","button","CardsContainer","StyledP","p","margin","QuestionContainer","StyledSpan","span","QuestionCard","callback","questionNo","totalQuestions","userAnswer","className","dangerouslySetInnerHTML","__html","answer","disabled","value","onClick","GlobalStyle","createGlobalStyle","bgImage","StyledH1","h1","fontSize","StartBTN","NextBtn","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","setColor","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prevScore","answerObject","correctAnswer","prev","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e88cb8c.chunk.js","sourcesContent":["import { ShuffleArray } from \"./utils\";\n\nexport type Question = {\ncategory : string;\ncorrect_answer : string;\ndifficulty: string;\nincorrect_answers:string[];\nquestion:string;\ntype:string;\n}\n\n\nexport type QuestionState = Question & {answers :string[]};\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const FetchQuizQuestions = async (amount:number,difficulty:Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question:Question)=>(\n        {\n            ...question,\n            answers:ShuffleArray([...question.incorrect_answers,question.correct_answer])\n        }\n    ))\n}","export const ShuffleArray =(array: any[])=> \n[...array].sort(()=>Math.random() - 0.5)","import styled from \"styled-components\";\n\ninterface Props {\n  color?: string;\n}\n\nconst Card = styled.div<Props>`\n  background-color: ${(Props) => (Props.color ? Props.color : \"#b5deff\")};\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  transition: 0.3s;\n  width: 40em;\n  margin: 0.1em 0;\n  height: 4.1em;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10px;\n  :hover {\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n    background-color: #eb92be;\n  }\n`;\n\nexport default Card;\n","import styled from \"styled-components\";\n\nconst CardBTN = styled.button`\n  width: 40em;\n  height: 4.1em;\n  background-color: transparent;\n  border-width: 0;\n`;\n\nexport default CardBTN;\n","import styled from \"styled-components\";\n\nconst CardsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: #c1ffd7;\n  width: 50em;\n  height: 20em;\n  border-radius: 10px;\n  justify-content: space-evenly;\n`;\n\nexport default CardsContainer;\n","import styled from \"styled-components\";\n\ninterface Props {\n  margin?: number;\n}\nexport const StyledP = styled.p<Props>`\n  color: #c1ffd7;\n  font-size: 1.2em;\n  margin: ${(Props) => (Props.margin ? Props.margin : 0.1)}em;\n`;\n\nexport default StyledP;\n","import styled from \"styled-components\";\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport default QuestionContainer;\n","import styled from \"styled-components\";\n\nconst StyledSpan = styled.span`\n  color: #32502e;\n  font-size: 2em;\n`;\n\nexport default StyledSpan;\n","import React, { useState } from \"react\";\nimport { AnswerObject } from \"../../App\";\nimport Card from \"../styled/card\";\nimport CardBTN from \"../styled/cardBTN\";\nimport CardsContainer from \"../styled/cardsContainer\";\nimport StyledP from \"../styled/p\";\nimport QuestionContainer from \"../styled/questionCard\";\nimport StyledSpan from \"../styled/span\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNo: number;\n  totalQuestions: number;\n  color: string;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  answers,\n  callback,\n  question,\n  questionNo,\n  totalQuestions,\n  userAnswer,\n  color,\n}) => {\n  return (\n    <QuestionContainer>\n      <StyledP className=\"number\">\n        Question:{questionNo}/{totalQuestions}\n      </StyledP>\n      <StyledP margin={1.2} dangerouslySetInnerHTML={{ __html: question }} />\n      <CardsContainer>\n        {answers.map((answer) => (\n          <Card color={color} key={answer}>\n            <CardBTN\n              disabled={userAnswer ? true : false}\n              value={answer}\n              onClick={callback}\n            >\n              <StyledSpan dangerouslySetInnerHTML={{ __html: answer }} />\n            </CardBTN>\n          </Card>\n        ))}\n      </CardsContainer>\n    </QuestionContainer>\n  );\n};\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/bg.586b465d.jpg\";","import styled,{createGlobalStyle} from \"styled-components\"\nimport bgImage from \"./images/bg.jpg\"\n\n\nexport const GlobalStyle = createGlobalStyle`\n\n    // html{\n    //     height:100%;\n    // }\n\n    body{\n        background-image:url(${bgImage});\n        // background-size: cover;\n        // margin: 0;\n        // padding:0 20px;\n        // display:flex;\n        // justify-content: ceneter;\n    }\n\n    // *{\n    //     box-sizing:border-box;\n    // }\n\n`;","import styled from \"styled-components\";\n\ninterface Props {\n  color?: string;\n  fontSize?: number;\n}\n\nexport const StyledH1 = styled.h1<Props>`\n  color: ${(Props) => (Props.color ? Props.color : \"#FCFFA6\")};\n  font-size: ${(Props) => (Props.fontSize ? Props.fontSize : 5)}em;\n  margin: 0.1em 0;\n`;\n\nexport const StartBTN = styled.button`\n  background-color: #c1ffd7;\n  width: 4em;\n  height: 2em;\n  font-size: 1.5em;\n  border-radius: 10px;\n  border-width: 0px;\n`;\n","import styled from \"styled-components\";\n\nconst NextBtn = styled.button`\n  background-color: #cab8ff;\n  width: 6em;\n  height: 2.5em;\n  font-size: 1.5em;\n  border-radius: 10px;\n  border-width: 0px;\n  margin: 0.2em 0;\n`;\n\nexport default NextBtn;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Difficulty, FetchQuizQuestions, QuestionState } from \"./API\";\n\n//components\n\nimport QuestionCard from \"./components/questionCard/questionCard\";\nimport { GlobalStyle } from \"./App.styles\";\nimport { StartBTN, StyledH1 } from \"./components/styled/h1\";\nimport StyledP from \"./components/styled/p\";\nimport NextBtn from \"./components/styled/nextBTN\";\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [color, setColor] = useState<string>(\"#b5deff\");\n\n  console.log(questions);\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await FetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //change color\n      setColor(\"#EB92BE\");\n      //users answer\n      const answer = e.currentTarget.value;\n      //check answer against current answer\n      const correct = questions[number].correct_answer === answer;\n      //add score if answer is correct\n      if (correct) setScore((prevScore) => prevScore + 1);\n      //save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //move on to the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <div className=\"App\">\n        <StyledH1>React Quiz</StyledH1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <StartBTN className=\"start\" onClick={startTrivia}>\n            Start\n          </StartBTN>\n        ) : null}\n        {!gameOver ? <StyledP className=\"score\">Score:{score}</StyledP> : null}\n        {loading && <StyledP>Loading Questions ....</StyledP>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            color={color}\n            questionNo={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <NextBtn className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </NextBtn>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}